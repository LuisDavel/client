// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}
datasource db {
  provider = "mysql"
  url = env("DATABASE_URL")
  relationMode = "prisma"
}

model QrCode {
  id           String        @id @default(uuid())
  hash         String?       @unique @default(cuid())
  dt_create    DateTime      @default(now())
  animals      String?       @unique
  view         ViewRegister?
  snap_qrCode  Snap_QrCode[]
  fk_id_animal Animal?       @relation(fields: [animals], references: [id], onDelete: Cascade)
}

model ViewRegister {
  id           String   @id @default(uuid())
  view_Animal  String  @unique
  view_QrCode  String  @unique
  address      String
  number       String
  district     String
  city         String
  CEP          String
  state        String
  descript     String
  complement   String
  dt_create    DateTime @default(now())
  fk_id_qrcode QrCode  @relation(fields: [view_QrCode], references: [id], onDelete: Cascade)
  fk_id_animal Animal?  @relation(fields: [view_Animal], references: [id], onDelete: Cascade)
}

model Snap_QrCode {
  id           String   @id @default(uuid())
  latitude     String
  longetude    String
  dt_create    DateTime @default(now())
  id_Qrcode    String
  fk_id_qrCode QrCode   @relation(fields: [id_Qrcode], references: [hash], onDelete: Cascade)

  @@index([id_Qrcode])
}

model Animal {
  id              String        @id @default(uuid())
  relation_animal String
  name            String
  type_animal     String
  race            String
  temperament    String
  size            String
  qrCode          QrCode?
  Animal_view     ViewRegister?
  dt_born         String
  photo_profile   String
  created_at      DateTime      @default(now())
  fk_id_entity    Entity        @relation(fields: [relation_animal], references: [userGoogle], onDelete: Cascade)

  @@map("animals")
  @@index([relation_animal])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Entity {
  id               String   @id @default(cuid())
  userGoogle       String   @unique
  email            String?
  name             String?
  cpf              String?
  dt_born          String?
  created_at       DateTime @default(now())
  number           String?
  photo_user       String?
  gender           String?
  fk_id_userGoogle User     @relation(fields: [userGoogle], references: [email], onDelete: Cascade)
  animals          Animal[]

  @@unique([cpf])
  @@map("entitys")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  userGoogle    Entity?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
